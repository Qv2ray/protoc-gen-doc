// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ3W/bNhB/z19BaC/bikodugDDQLvA7LnF0GZB3O2dls42MYrUSMqNoel/Hyiq+v5a7bhZkJcguvvxjryP39ESfnMfMnQAqajgM+cH95WDgPsioHw3c/74uHr5k/NmfoWJ1NRnML9CCGuqGcxvpdDCFwwthR+HwDXRVHDsWe0VQkkiCd8BcleUgUpTs1SBb1BGXRhKEveGhJCmlbVmdUQkQe4SlC9pZFZlJip2P4BSZJebLo0jGsycJHFXMWPWsGNNVj2+F3zX4XXIr9HRLXLfEbWiwAJVyLEmGwZoK0kIM4cwVjgsXGKfEaU4CVveSwWyZhsbMiZ2UsQR8gVTM+fHinGEsBFG4BvlJxro/cz53vFORrxyr8dBr5sQvQcSVCUIYSk+1SUIYeBaHufZabFnH7ohH48RDCPekw2wYUglk51A7DX2iL3WQbDeiKCxrlLftWoYPXil4If2jRnlfyHzB3hZ0SYkpqLzKrKP2DOw+bA9s8JEa8xvVuXfUh7APXJ/z+KmkBNAJMEnGgLnnwC2JGYabQlT8F2aYgijPVFUzZcFysVeIU0S4EGadraW7amltfgnYbE5jsHNc9nPKEmaei8D5GanJdXkK4PXE11PK/ZsqxV84WWdXXJD1ULBBr/ea+CGP8/PCDegNASo9DBCDteXIIfHQR9FTE6lkF+IGkHcxOEG5FdmmY4qG43RV2Katr2F4JpQTvmuYblU/Hc2s2kZp7MnxDrYq92gqqqyUHgcXu5OdC6my4I8Rm+vL0FvJ/KSOdv/gE5svM9OJae15aWaqqeN8oe+sV7/9VKUt/l585LBAVj/nMaUb4UMCRvsludJ/jzJnyf5k5rktb6fQj55jaxBHqj/Ze82Hn6Gd8zvD6D34nG8vHhwwrJnReOT/g7+jkFpNE5dd6AiwRVMgD44P+WpvAA55fFpMEkubdGIbfVcu9YSSEj5Lk2Ryv4faufBPdjItzZhxb27sOov3MZjvP00FBVe6nxtu/YJI9Le27Oqrff++I2n/74z1tMd+usxwHn17YZqZSnPtBtJoUV/W3++mAhtAtgPWLx4MaT+jRzIkP72qPd9fGFlb8Wg+28Grb+7HVLfxZtjh75R2i2aapNUOR6z4qtTVF8KPs/M7INFpcMrz0ObN+RmkjOKWkTRJGsmVZOANmeToG+nHWSx3hMZjTveTzuJyWsvsEVcTdpqkFadsjpuThV2usJe8UHq3wAAAP//9p3zJMIaAAA=",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWzW7jNhC+6ymmUg9rL+TcF7YPjZtdFLtpsA56WRQNbY1tATKpipSRQOS7F/yRSFlW4gLpqT5Ymhlpfr75ZsQEHiom2JYVsGLb+ohUEJEzGs0JUHLERSxYGS/nN2QZRUkCj2RTILAd3DIqkAoeNU1F6B5hdpcXyJWKmubnXV7gX/p1+LSA2T05olIp/Ggad//nh6S7n0QATZNCvoPZN+Sc7JGDUkbrPLdqpQCsm6+M7kNXd3VRhO6QZs5FCkgzSDtJh/mV1sfzGEb3bgGeBVKeMzqI0hlcKA1aWuAJC/A2E9KDqFSKne2a8GusTvl2AGOr9lX+2wpbbQo/1ltSkAr+IEWN8PhSos6aG2V60spUaOUkupognnJdZo548xJIke/pIq7y/UHEyzmBQ4W7RZwYdj6yUj83vyktSbv3o6aZrZBvq7zUpFYqyMaTqhfYw+BZbzx6Rlz0qnH/QvhdjkWmfUowtyANOCDhK9lgARKCN0FGElL9A3uFvuh+IEMMtX/Xb+krBdnRVscLm2rliX3aZGEeNyl/yGmGzzD73eTDIc6wrHBLBGaxzHBH6kLAjhQcJ0pNp6vOOptOW440DWWbCvqQWEBW1oMhiVLgxE9gAAxNzpWp1FKsvXpow9mJpB8XD/EvhOvLfX3cYDUG9RDuDu1x2IOBvgR9D3kr6/1IcprT/bnFpuek/xg6a5r/lNoZPrb7NU2XwSi43fcOcyBBm97qwRWAm+JGwX4LwgCMIQhotr9D4BK3AhhGlnAIycUN/v/l59OAoE+jDPU96bXgjJ3+s3UdQV8h5zcUB5a1HP2Of9fIRdud78hLRjm28mh3zhtxLp7LMvzo6ATG97dL6XyNO3WwzW0TnH4tKiTHnO6VAm7uO8idV1vZ0K3VX/BrDa85fmvwBj3m7anEtdfNZ5LA8CyhmzUr9cm07cY9E8hBwu3HjyDhN3IiIOHhRRzMgH1m2pRo1ZcH3ct68zLWNHu9OFv+z9sDIpo0ffNCNppTtMUwhpsl9FWu07qEbv7KMrTpgkLZVhZqPvd83a4PpCq7pw89Z7r6Vu6A/icAAP//o9X/quoLAAA=",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
