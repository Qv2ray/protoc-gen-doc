// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ30/bOhR+719h5fEiEq64SFeTW6TBqmkChIDt3U1OW2uOndlOAUX93yfHIb9/dLQUtvGCiM/nc+zj833HSfHpQ8jQCqSigo+df90jBwH3RUD5Yux8vZse/u+cTkaYSE19BpMRQlhTzWByLYUWvmDoXPhxCFwTTQXHnrWOEEoSSfgCkDulDNR6baYq8A3KmHNHSeJekRDW69JcMzsikiD3HJQvaWRmpS5Kfi9BKbLIXBfOEQ3GTpK405gx69ixLssRLwRftETti2tsdI7cz0RNKbBA5eNYkxkDNJckhLFDGMsD5iGxz4hSnISN6IUBWbe1BRkXCyniCPmCqbHzX8k5QtgMRuAb4z0N9HLs/ON4WyOO3JNh0HEdopdAgvIIQliK++oIQhi4lo+TdLfYsw/tkLvHCPoRF2QGrB9SOslWIPZqa8ReYyNYz0RQm1eq70o1DG68VPB968aM8u/I/AFeVLRJianorIrsI/YMbNLvz8ww2RqK28oAW/rnMCcx098Ii01Ug5tkYx9QktTtXgpIEuBBR9BG7k1aU3j1PKrZx55lRE5rLyVgQeGyh5y0nx40cCNzuyfuFSgNASoiDHD4ZB8cfhssz3OyLdM/EjWAuIrDGchXFoOWKhvM0SsJQtPfmeCaUE75oua5MPy66Nhj+atUB3uVi07ZVBQKj8P9XV12pXRpkofk7Xgf8ralLpm9/QZyYvO9cynZjpb7IlUHjbKHrrZefcnIy9u8hRwyWAHr7tOY8rmQIWG9bHnv5O+d/L2T/1GdvML7TcQnq5FbkCvqP+8TxMv38Jb+fQl6Kd7GN4YXFyy7VzTc6W/gRwxKo2HpugEVCa5gA+iL61N2lHsQpyw/NSXJRhsyYqmeWW+1BBJSvlivkUr/76Nz7xps5huLsMOdq7DmZy7jLd5+aoaSLrV+Xb31CSPS3tvTqq1yf/jG033fGeJ0i/1kCLBbe5NQjVPKTtqNpNCim9ZPFxOhTQK7AWcHB4NOvpAVGQRdP+ql4F2wWrk1pKMpHEXLSguiKhtdaXnqY+m3/hLrSs99ezCCYxI2iDqLoo28mcxtBLTZ64Q22Frnao2pVZ62XBdKlBxhL/+x5GcAAAD//x4vKjleGQAA",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWz2+jOhC+81fMC+/wqor0XiU5vPZVT6u2qtpqL9Vq6yQTgmRsFptoK/D/vvIPsAnQVNrVXpYLnhk8zHzf54EYHkou+YZTuOabKkcmicw4ixYEGMlxOZO8mK0WF2QVRXEMz2RNEfgOrjiTyKSI6rokLEWY32QUhVJRXf+9yyh+1dvhcgnze5KjUgm81LVbf/kn7tZnEUCX4w6FIKlOA2A33HKWhptuKkrDjci2SoUp/mNV/lP7v0tkIuOsTaL7SigekIKPmWS+T6US7GITiZ+wPGSbsLfTdbX3BF6eNoSSEj4TWiE8vxWoaxDGmRy0M5HaeRZ9mBHPcVeLY3pRAKFZypazMkv3crZaENiXuFvOYiOHZ17o5xYXhVVFtz+q6/k1ik2ZFVpFSgXVeG57L/aNe5mZjJ650azZDub/E3GTId3qnA2YJTQGHGjglqyRQgPBTmiiBhJ9gb1D33QXNCGGOj8khsvGdwpNJy/9vpBGa5/Zp00V5vG6ZnxdQr8T28c17khFpeFWKXDmJZi+w5DTgymwrxCPSCjgqPGa9cj8S4S+3Vf5GssphIYodSBNo+XfPYpYDzBr6zlCMpax9Dhiy/s90NnQ4q8kAWRbyJ1UIUlWgYLdaPkF8m1Ah05x8AHATXOTYJ+CMABjCALqblsExrQVwDAxCUNIRsfon6vP14FAXycV6jnpUXCkTv99+ZhA3xHnHco937YafcRvFQrZsvOIouBMYGtPsnNMxLF5bDfht0IXMD12XUnH09e5gyFsSXD+J1kiyTOWKgXCrDvIXVbb2TCt9Y/ktYH3Ep86eAOOheOxpdedzziG4S+AJmte6D+4lo17LlFAA1fn563rEzmQdv3wJvecOWucrIAVGJ61kUNly/Jkheozf5cWsxlcrKDvcszqkrvzVhRhTNce2rb+1tOh8yMAAP//me02bccKAAA=",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
