// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ3W/bNhB/z19BaC/bikodugDDQLvA7LnF0GZB3O2dls42MYrUSMqNoel/Hyiq+v5a7bhZkJcguvvxjryP39ESfnMfMnQAqajgM+cH95WDgPsioHw3c/74uHr5k/NmfoWJ1NRnML9CCGuqGcxvpdDCFwwthR+HwDXRVHDsWe0VQkkiCd8BcleUgUpTs1SBb1BGXRhKEveGhJCmlbVmdUQkQe4SlC9pZFZlJip2P4BSZJebLo0jGsycJHFXMWPWsGNNVj2+F3zX4XXIr9HRLXLfEbWiwAJVyLEmGwZoK0kIM4cwVjgsXGKfEaU4CVveSwWyZhsbMiZ2UsQR8gVTM+fHinGEsBFG4BvlJxro/cz53vFORrxyr8dBr5sQvQcSVCUIYSk+1SUIYeBaHufZabFnH7ohH48RDCPekw2wYUglk51A7DX2iL3WQbDeiKCxrlLftWoYPXil4If2jRnlfyHzB3hZ0SYkpqLzKrKP2DOw+bA9s8JEa8xvVuXfUh7APXJ/z+KmkBNAJMEnGgLnnwC2JGYabQlT8F2aYgijPVFUzZcFysVeIU0S4EGadraW7amltfgnYbE5jsHNc9nPKEmaei8D5GanJdXkK4PXE11PK/ZsqxV84WWdXXJD1ULBBr/ea+CGP8/PCDegNASo9DBCDteXIIfHQR9FTE6lkF+IGkHcxOEG5FdmmY4qG43RV2Katr2F4JpQTvmuYblU/Hc2s2kZp7MnxDrYq92gqqqyUHgcXu5OdC6my4I8Rm+vL0FvJ/KSOdv/gE5svM9OJae15aWaqqeN8oe+sV7/9VKUt/l585LBAVj/nMaUb4UMCRvsludJ/jzJnyf5k5rktb6fQj55jaxBHqj/Ze82Hn6Gd8zvD6D34nG8vHhwwrJnReOT/g7+jkFpNE5dd6AiwRVMgD44P+WpvAA55fFpMEkubdGIbfVcu9YSSEj5Lk2Ryv4faufBPdjItzZhxb27sOov3MZjvP00FBVe6nxtu/YJI9Le27Oqrff++I2n/74z1tMd+usxwHn17YZqZSnPtBtJoUV/W3++mAhtAtgPWLx4MaT+jRzIkP72qPd9fGFlb8Wg+28Grb+7HVLfxZtjh75R2i2aapNUOR6z4qtTVF8KPs/M7INFpcMrz0ObN+RmkjOKWkTRJGsmVZOANmeToG+nHWSx3hMZjTveTzuJyWsvsEVcTdpqkFadsjpuThV2usJe8UHq3wAAAP//9p3zJMIaAAA=",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWzW7jNhC+6ymmUg9rL+TcF7YPjZtdFLtpsA56WRQNbY1tATKpipSRQOS7F/yRSFlW4gLpqT5Ymhlpfr75ZsQEHiom2JYVsGLb+ohUEJEzGs0JUHLERSxYGS/nN2QZRUkCj2RTILAd3DIqkAoeNU1F6B5hdpcXyJWKmubnXV7gX/p1+LSA2T05olIp/Ggad//nh6S7n0QATZNCvoPZN+Sc7JGDUkbrPLdqpQCsm6+M7kNXd3VRhO6QZs5FCkgzSDtJh/mV1sfzGEb3bgGeBVKeMzqI0hlcKA1aWuAJC/A2E9KDqFSKne2a8GusTvl2AGOr9lX+2wpbbQo/1ltSkAr+IEWN8PhSos6aG2V60spUaOUkupognnJdZo548xJIke/pIq7y/UHEyzmBQ4W7RZwYdj6yUj83vyktSbv3o6aZrZBvq7zUpFYqyMaTqhfYw+BZbzx6Rlz0qnH/QvhdjkWmfUowtyANOCDhK9lgARKCN0FGElL9A3uFvuh+IEMMtX/Xb+krBdnRVscLm2rliX3aZGEeNyl/yGmGzzD73eTDIc6wrHBLBGaxzHBH6kLAjhQcJ0pNp6vOOptOW440DWWbCvqQWEBW1oMhiVLgxE9gAAxNzpWp1FKsvXpow9mJpB8XD/EvhOvLfX3cYDUG9RDuDu1x2IOBvgR9D3kr6/1IcprT/bnFpuek/xg6a5r/lNoZPrb7NU2XwSi43fcOcyBBm97qwRWAm+JGwX4LwgCMIQhotr9D4BK3AhhGlnAIycUN/v/l59OAoE+jDPU96bXgjJ3+s3UdQV8h5zcUB5a1HP2Of9fIRdud78hLRjm28mh3zhtxLp7LMvzo6ATG97dL6XyNO3WwzW0TnH4tKiTHnO6VAm7uO8idV1vZ0K3VX/BrDa85fmvwBj3m7anEtdfNZ5LA8CyhmzUr9cm07cY9E8hBwu3HjyDhN3IiIOHhRRzMgH1m2pRo1ZcH3ct68zLWNHu9OFv+z9sDIpo0ffNCNppTtMUwhpsl9FWu07qEbv7KMrTpgkLZVhZqPvd83a4PpCq7pw89Z7r6Vu6A/icAAP//o9X/quoLAAA=",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
